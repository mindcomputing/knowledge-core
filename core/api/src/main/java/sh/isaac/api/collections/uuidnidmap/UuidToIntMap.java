/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * You may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributions from 2013-2017 where performed either by US government 
 * employees, or under US Veterans Health Administration contracts. 
 *
 * US Veterans Health Administration contributions by government employees
 * are work of the U.S. Government and are not subject to copyright
 * protection in the United States. Portions contributed by government 
 * employees are USGovWork (17USC ยง105). Not subject to copyright. 
 * 
 * Contribution by contractors to the US Veterans Health Administration
 * during this period are contractually contributed under the
 * Apache License, Version 2.0.
 *
 * See: https://www.usa.gov/government-works
 * 
 * Contributions prior to 2013:
 *
 * Copyright (C) International Health Terminology Standards Development Organisation.
 * Licensed under the Apache License, Version 2.0.
 *
 */



package sh.isaac.api.collections.uuidnidmap;

import java.util.OptionalInt;

//~--- JDK imports ------------------------------------------------------------

import java.util.UUID;
import sh.isaac.api.ConfigurationService.BuildMode;

//~--- interfaces -------------------------------------------------------------

/**
 * Created by kec on 7/27/14.
 */
public interface UuidToIntMap {
   /**
    * Contains key.
    *
    * @param key the key
    * @return true, if successful
    */
   boolean containsKey(UUID key);

   /**
    * Contains value.  Note, this may be a slow operation, if the inverse cache is not enabled.
    *
    * @param value the value
    * @return true, if successful
    */
   boolean containsValue(int value);
   
   /**
    * Returns true, if this implementation has the inverse cache enabled, which will speed up calls to 
    * {@link #getKeysForValue(int)}
    * 
    * This method is an optimization for loader patterns, where it can be faster to read the nid to UUID from 
    * this cache, but only if the cache actually has the value.
    * 
    * Implementations should enable this cache, if the system is in {@link BuildMode#IBDF}
    * 
    * @return true, if a cache is enabled
    */
   boolean inverseCacheEnabled();
   
   /**
    * If the inverse cache was not enabled, enable it now.
    */
   void enableInverseCache();

   /**
    * Put.
    *
    * @param key the key
    * @param value the value
    * @return {@code true} if the receiver did not already contain such a key; {@code false} if the
    * receiver did already contain such a key - the new value has now replaced the formerly associated value.
    */
   boolean put(UUID key, int value);

   /**
    * Gets the value
    *
    * @param key the key
    * @return the int value
    */
   OptionalInt get(UUID key);
   
   /**
    * @return The highest nid ever generated by the {@link #getWithGeneration(UUID)} method.  
    * Does NOT return the highest NID value in the store.  If generation is not supported, 
    * this method should be unsupported as well.
    */
   public int getMaxNid();
   
   /**
    * Generate (and store) a new nid for this UUID, if the UUID does not already have a nid assigned.
    * @param uuidKey
    * @return the existing or newly generated nid
    */
   public int getWithGeneration(UUID uuidKey);
   
   /**
    * Gets the keys for value.
    *
    * @param nid the value
    * @return the keys for value
    */
   public UUID[] getKeysForValue(int nid);
   
   /**
    * If {@link UuidToIntMap#inverseCacheEnabled()}, return true if the cache has a hit for this nid.  Otherwise, false.
    * @param nid
    * @return true, if the nid is mapped to a UUID in the cache.
    */
   public boolean cacheContainsNid(int nid);
   
   /**
    * @return The best estimate of the number of bytes used to store the data held by this map.
    */
   public int getDiskSpaceUsed();
   
   /**
    * @return The best estimate of the number of bytes currently held in heap, for this map.
    */
   public int getMemoryInUse();
}

